# TODO(salikh): Create a custom bazel build rule for declaring master notebooks
# and deliverables produced from them.

load("//exercises:defs.bzl", "assignment_notebook")

assignment_notebook(
    name = "dataframe-pre1-en",
    srcs = ["dataframe-pre1-en-master.ipynb"],
    language = "ja",
)

assignment_notebook(
    name = "dataframe-pre2-en",
    srcs = ["dataframe-pre2-en-master.ipynb"],
)

assignment_notebook(
    name = "dataframe-pre3-en",
    srcs = ["dataframe-pre3-en-master.ipynb"],
)

assignment_notebook(
    name = "helloworld-en",
    srcs = ["helloworld-en-master.ipynb"],
)

assignment_notebook(
    name = "oop-en",
    srcs = ["oop-en-master.ipynb"],
)

assignment_notebook(
    name = "functional-ja",
    srcs = ["functional-ja-en-master.ipynb"],
    language = "ja",
)

genrule(
    name = "functional-en-student",
    srcs = [
        "functional-ja-en-master.ipynb",
    ],
    outs = ["functional-en-student.ipynb"],
    cmd = """$(location //go/cmd/assign) --input="$<" --output="$@" --command=student --language=en""",
    tools = [
        "//go/cmd/assign",
    ],
)

load("@bazel_tools//tools/build_defs/pkg:pkg.bzl", "pkg_tar")

pkg_tar(
    name = "helloworld-en-autograder_tar",
    srcs = [":helloworld-en_autograder"],
    mode = "644",
    package_dir = "autograder",
    strip_prefix = "helloworld-en-autograder",
)

pkg_tar(
    name = "functional-ja-autograder_tar",
    srcs = [":functional-ja_autograder"],
    mode = "644",
    package_dir = "autograder",
    strip_prefix = "functional-ja-en-ja-autograder",
)

pkg_tar(
    name = "oop-en-autograder_tar",
    srcs = [":oop-en_autograder"],
    mode = "644",
    package_dir = "autograder",
    strip_prefix = "oop-en-autograder",
)

filegroup(
    name = "data_dir",
    srcs = glob(["data/*"]),
)

pkg_tar(
    name = "dataframe-pre1-en-autograder_tar",
    srcs = [
        ":data_dir",
        ":dataframe-pre1-en_autograder",
    ],
    mode = "644",
    package_dir = "autograder",
    remap_paths = {
        "exercises": "DataFrame1/CreateDataFrameFromText",
    },
    strip_prefix = "dataframe-pre1-en-autograder",
)

pkg_tar(
    name = "dataframe-pre2-en-autograder_tar",
    srcs = [":dataframe-pre2-en_autograder"],
    mode = "644",
    package_dir = "autograder",
    strip_prefix = "dataframe-pre2-en-autograder",
)

pkg_tar(
    name = "dataframe-pre3-en-autograder_tar",
    srcs = [":dataframe-pre3-en_autograder"],
    mode = "644",
    package_dir = "autograder",
    strip_prefix = "dataframe-pre3-en-autograder",
)

pkg_tar(
    name = "autograder_tar",
    mode = "644",
    deps = [
        ":dataframe-pre1-en-autograder_tar",
        ":functional-ja-autograder_tar",
        ":helloworld-en-autograder_tar",
        ":oop-en-autograder_tar",
	":dataframe-pre2-en-autograder_tar",
    ],
)

pkg_tar(
    name = "tmp-autograder_tar",
    mode = "644",
    package_dir = "tmp",
    deps = [
        ":autograder_tar",
    ],
)

pkg_tar(
    name = "student_notebooks_tar",
    srcs = [
        ":helloworld-en_student",
        ":functional-ja_student",
        ":functional-en-student",
        ":oop-en_student",
        ":dataframe-pre1-en_student",
        ":dataframe-pre2-en_student",
        ":dataframe-pre3-en_student",
    ] + glob(["data/*"]),
    mode = "644",
    strip_prefix = ".",  # This is to prevent directory flattening.
)

pkg_tar(
    name = "tmp-student_notebooks_tar",
    mode = "644",
    package_dir = "tmp/student",
    strip_prefix = ".",  # This is to prevent directory flattening.
    deps = [
        ":student_notebooks_tar",
    ],
)

#pkg_tar(
#    name = "nsjail_tar",
#    srcs = [":nsjail"],
#    package_dir = "usr/local/bin",
#)

load("@io_bazel_rules_docker//container:container.bzl", "container_push", "container_image")

container_image(
    name = "autograder_image",
    #base = "@go_image_base//image",
    #base = "@alpine_with_bash//image",
    base = "@debian_testing//image",
    tars = [
        ":autograder_tar",
        #":nsjail_tar"
    ],
    visibility = ["//visibility:public"],
)
